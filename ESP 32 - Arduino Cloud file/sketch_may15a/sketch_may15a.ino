/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2175ebbd-e9c5-4d51-99a7-c1ff806e2b77 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float co;
  float co2;
  float flammable_gases;
  float ozone;
  float p_m_2_5;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#define RXp2 16
#define TXp2 17
#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);

  Serial2.begin(9600, SERIAL_8N1, RXp2, TXp2);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  String inputString = Serial2.readString();
  
  float values[3];
  
  // Parse the string
  int startIndex = 0;
  int endIndex = inputString.indexOf(',');
  bool allNonZero = true;
  for (int i = 0; i < 3; i++) {
    String numberString = inputString.substring(startIndex, endIndex);
    values[i] = atof(numberString.c_str());
    if (values[i] == 0) {
      allNonZero = false;
      break;
    }
    startIndex = endIndex + 1;
    endIndex = inputString.indexOf(',', startIndex);
    if (endIndex == -1) {
      endIndex = inputString.length();
    }
  }
  
  // If all values are non-zero, assign them to variables
  if (allNonZero) {
    p_m_2_5 = values[0];
    ozone = values[1];
    co2 = values[2];
    

  } 
  
  
  
  
  
  
  
  
  
  
  
  
  /*
  String p_m_2_5_0 = Serial2.readString();
  float p_m_2_5_1 = p_m_2_5_0.toFloat();
  if(p_m_2_5_1 > 0){
  p_m_2_5 = p_m_2_5_1 ;
  }
  */
  //String start = Serial2.readString();
  
  /*
  if(start.toInt() == 99999999){
    
  String p_m_2_5_0 = Serial2.readString();
  float p_m_2_5_1 = p_m_2_5_0.toFloat();
  if(p_m_2_5_1 > 0){
  p_m_2_5 = p_m_2_5_1 ;
  }
  
  String ozone_0 = Serial2.readString();
  float ozone_1 = ozone_0.toFloat();
  if(ozone_1 > 0){
  ozone = ozone_1 ;
  }
  
  String co2_0 = Serial2.readString();
  float co2_1 = co2_0.toFloat();
  if(co2_1 > 0){
  co2 = co2_1 ;
  }
  
  String co_0 = Serial2.readString();
  float co_1 = co_0.toFloat();
  if(co_1 > 0){
  co = co_1 ;
  }
  
  String flammable_gases_0 = Serial2.readString();
  float flammable_gases_1 = flammable_gases_0.toFloat();
  if(flammable_gases_1 > 0){
  flammable_gases = flammable_gases_1 ;
  }

    
    
  }
  */

}



/*
  Since PM25 is READ_WRITE variable, onPM25Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onPM25Change()  {
  // Add your code here to act upon PM25 change
}

/*
  Since Ozone is READ_WRITE variable, onOzoneChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOzoneChange()  {
  // Add your code here to act upon Ozone change
}

/*
  Since Co2 is READ_WRITE variable, onCo2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onCo2Change()  {
  // Add your code here to act upon Co2 change
}

/*
  Since Toluene is READ_WRITE variable, onTolueneChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTolueneChange()  {
  // Add your code here to act upon Toluene change
}

/*
  Since Nh4 is READ_WRITE variable, onNh4Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onNh4Change()  {
  // Add your code here to act upon Nh4 change
}



/*
  Since Co is READ_WRITE variable, onCoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCoChange()  {
  // Add your code here to act upon Co change
}

/*
  Since FlammableGases is READ_WRITE variable, onFlammableGasesChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFlammableGasesChange()  {
  // Add your code here to act upon FlammableGases change
}
